# check whether each malo has two or more rows
SELECT
  malo,
  delivery_start__utc_,
  COUNT(*) AS row_count
FROM `flex-power.domain.dso__infeed_and_offtake__measured_per_meter_point_latest`
GROUP BY malo, delivery_start__utc_
HAVING COUNT(*) > 1
ORDER BY row_count DESC





with monthly_produce_meter AS (
SELECT 
  malo,
  EXTRACT(MONTH FROM DATETIME(TIMESTAMP(delivery_start__utc_), 'Europe/Berlin')) AS month,
  EXTRACT(YEAR FROM DATETIME(TIMESTAMP(delivery_start__utc_), 'Europe/Berlin')) AS year,
  SUM(measured_power__kw_ * 0.25) AS monthly_energy_kWh,
  SUM(measured_power__kw_ * 0.25 / 1000) AS monthly_energy_MWh

  
FROM `flex-power.domain.dso__infeed_and_offtake__measured_per_meter_point_latest` 
GROUP BY malo, month, year
),


unique_malo_temp as (
SELECT 
    malo,
    park_id,
    technology,
    balancing_type,
    tso,
    contract_id,
    FIRST_VALUE(name) OVER (PARTITION BY malo ORDER BY name) AS name,
    FIRST_VALUE(unit_id) OVER (PARTITION BY malo ORDER BY unit_id) AS unit_id
  FROM `flex-power.domain.crm__assets__upgrid_units`
),


unique_malo as (
SELECT DISTINCT malo, park_id, technology, balancing_type, tso, contract_id, name, unit_id
FROM unique_malo_temp
),


monthly_produce_meter_park as (
SELECT
  a.*,
  b.park_id,
  b.technology,
  b.balancing_type,
  b.tso,
  b.contract_id,
  b.name,
  b.unit_id
FROM monthly_produce_meter a
LEFT JOIN unique_malo b
ON a.malo = b.malo
)


SELECT *
FROM monthly_produce_meter_park
ORDER BY year, month

















WITH contract_dates AS (
  SELECT
    malo,
    DATE(contract_start) AS contract_start,
    DATE(contract_end) AS contract_end
  FROM `flex-power.sources.crm__latest_contracts_and_units_monday_board`
),

-- Generate one row per month per malo between contract_start and contract_end
calendar AS (
  SELECT
    c.malo,
    DATE_TRUNC(DATE_ADD(c.contract_start, INTERVAL m MONTH), MONTH) AS month
  FROM contract_dates c,
  UNNEST(GENERATE_ARRAY(
    0,
    TIMESTAMP_DIFF(c.contract_end, c.contract_start, MONTH)
  )) AS m
),

-- Count available records per month and malo for each column
energy_status AS (
  SELECT
    e.malo,
    DATE_TRUNC(e.delivery_start_berlin, MONTH) AS month,
    COUNTIF(e.curtailment_kWh IS NOT NULL) AS curtailment_count,
    COUNTIF(e.quarterly_energy_kWh IS NOT NULL) AS quarterly_energy_count,
    COUNTIF(e.redispatch_kWh IS NOT NULL) AS redispatch_count
  FROM `flex-power.playground_sales.rmv_dayahead_meter` e
  GROUP BY e.malo, month
),

-- Join calendar with energy counts to fill gaps
merged AS (
  SELECT
    cal.malo,
    cal.month,
    IFNULL(es.curtailment_count, 0) AS curtailment_count,
    IFNULL(es.quarterly_energy_count, 0) AS quarterly_energy_count,
    IFNULL(es.redispatch_count, 0) AS redispatch_count
  FROM calendar cal
  LEFT JOIN energy_status es
    ON cal.malo = es.malo AND cal.month = es.month
),

-- Classify each column by data completeness
final_status AS (
  SELECT
    malo,
    FORMAT_DATE('%Y-%m', month) AS year_month,

    CASE
      WHEN curtailment_count >= 2688 THEN 'Complete' --28 days of full data each month
      WHEN curtailment_count BETWEEN 1 AND 2687 THEN 'half full'
      ELSE 'NO DATA AT ALL'
    END AS curtailment_status,

    CASE
      WHEN quarterly_energy_count >= 2688 THEN 'Complete' --28 days of full data each month
      WHEN quarterly_energy_count BETWEEN 1 AND 2687 THEN 'half full'
      ELSE 'NO DATA AT ALL'
    END AS quarterly_energy_status,

    CASE
      WHEN redispatch_count >= 2688 THEN 'Complete' --28 days of full data each month
      WHEN redispatch_count BETWEEN 1 AND 2687 THEN 'half full'
      ELSE 'NO DATA AT ALL'
    END AS redispatch_status

  FROM merged
)

SELECT *
FROM final_status
WHERE year_month <= FORMAT_DATE('%Y-%m', CURRENT_DATE())
  --AND malo = '50439289254'
ORDER BY malo, year_month;
